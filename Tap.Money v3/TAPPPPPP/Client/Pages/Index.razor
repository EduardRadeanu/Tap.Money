@page "/"
@using TAPPPPPP.Shared
@inject HttpClient Http

<PageTitle>Report Expenses</PageTitle>


<h1>Report Expenses</h1>


@if (expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Cafea</h3>
    <input type="text" @bind="@moneySpent" />

    <button class="btn btn-primary" @onclick="AddExpense">Adaugă</button>
    <table class="table">
        <!-- Codul pentru antetul tabelului -->
        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>
        <!-- Codul pentru corpul tabelului -->
        <tbody>
            <!-- Codul pentru fiecare rând al tabelului -->
            @foreach (var expense in expenses.Where(e => e.Descriere == "Cafea"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }
            <!-- Codul pentru adăugarea unei noi cheltuieli -->
            @if (!string.IsNullOrEmpty(moneySpent) && expenses.Any(e => e.Descriere == "Cafea"))
            {
                var expense = expenses.First(e => e.Descriere == "Cafea");
                <tr>
                    <td colspan="4">@expense.Valoare</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Supermarket</h3>
    <input type="text" @bind="@moneySpent" />

    <button class="btn btn-primary" @onclick="AddExpense">Adaugă</button>
    <table class="table">
        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses.Where(e => e.Descriere == "Supermarket"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(moneySpent) && expenses.Any(e => e.Descriere == "Supermarket"))
            {
                var expense = expenses.First(e => e.Descriere == "Supermarket");
                <tr>
                    <td colspan="4">@decimal.Parse(moneySpent)</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Combustibil</h3>

    <input type="text" @bind="@moneySpent" />

    <button class="btn btn-primary" @onclick="AddExpense">Adaugă</button>
    <table class="table">
        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses.Where(e => e.Descriere == "Combustibil"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(moneySpent) && expenses.Any(e => e.Descriere == "Combustibil"))
            {
                var expense = expenses.First(e => e.Descriere == "Combustibil");
                <tr>
                    <td colspan="4">@decimal.Parse(moneySpent)</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Transport Public</h3>
    <input type="text" @bind="@moneySpent" />

    <button class="btn btn-primary" @onclick="AddExpense">Adaugă</button>
    <table class="table">
        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses.Where(e => e.Descriere == "Transport Public"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(moneySpent) && expenses.Any(e => e.Descriere == "Transport Public"))
            {
                var expense = expenses.First(e => e.Descriere == "Transport Public");
                <tr>
                    <td colspan="4">@decimal.Parse(moneySpent)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Expense[]? expenses;
    private string moneySpent;

    protected override async Task OnInitializedAsync()
    {
        expenses = await Http.GetFromJsonAsync<Expense[]>("ReportExpenses");
    }

    private async Task AddExpense()
    {
        var expense_cafea = new Expense
            {
                Zi = decimal.Parse(moneySpent),
                Saptamana = 7 * decimal.Parse(moneySpent),
                Luna = 30 * decimal.Parse(moneySpent),
                An = 364 * decimal.Parse(moneySpent),
                Descriere = "Cafea",
                Valoare = decimal.Parse(moneySpent)
            };
        var expense_supermarket = new Expense
        {
                Zi = decimal.Parse(moneySpent),
                Saptamana = 7 * decimal.Parse(moneySpent),
                Luna = 30 * decimal.Parse(moneySpent),
                An = 364 * decimal.Parse(moneySpent),
                Descriere = "Supermarket",
                Valoare = decimal.Parse(moneySpent)
        };

        HttpResponseMessage response = await Http.PostAsJsonAsync("ReportExpenses", expense_cafea);

        if (response.IsSuccessStatusCode)
        {
            expenses = await response.Content.ReadFromJsonAsync<Expense[]>();
            moneySpent = ""; // Resetează valoarea câmpului moneySpent după adăugarea cheltuielii

            // Actualizează componenta
            StateHasChanged();
        }
        else
        {
            // Tratează cazul în care solicitarea a eșuat
            // Exemplu:
            // Afișează un mesaj de eroare sau efectuează o altă acțiune
        }
    }

    private int GetWeekNumber(DateTime date)
    {
        // Obțineți numărul săptămânii pe baza datei
        // Implementați logica necesară pentru a calcula numărul săptămânii
        // Exemplu:
        // return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(date, CalendarWeekRule.FirstDay, DayOfWeek.Monday);

        // Acesta este un exemplu simplu care returnează o valoare statică pentru demonstrație
        return 1;
    }
}
