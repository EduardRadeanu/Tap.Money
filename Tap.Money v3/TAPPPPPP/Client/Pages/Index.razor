@page "/"
@using TAPPPPPP.Shared
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
<PageTitle>Report Expenses</PageTitle>


<h1>Report Expenses</h1>


@if (expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>Cafea</h3>
    <input type="text" @bind="@moneySpent" />

    <button class="btn btn-primary" @onclick="AddExpense">Adaugă</button>
    <table class="table">

        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var expense in expenses.Where(e => e.Descriere == "Cafea"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }

            @if (!string.IsNullOrEmpty(moneySpent) && expenses.Any(e => e.Descriere == "Cafea"))
            {
                var expense = expenses.First(e => e.Descriere == "Cafea");
                <tr>
                    <td colspan="4">@expense.Valoare</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Supermarket</h3>
    <input type="text" @bind="@moneySpentSupermarket" />

    <button class="btn btn-primary" @onclick="AddExpenseSupermarket">Adaugă</button>
    <table class="table">

        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>

        <tbody>

            @foreach (var expense in expenses.Where(e => e.Descriere == "Supermarket"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }

            @if (!string.IsNullOrEmpty(moneySpentSupermarket) && expenses.Any(e => e.Descriere == "Supermarket"))
            {
                var expense = expenses.First(e => e.Descriere == "Supermarket");
                <tr>
                    <td colspan="4">@expense.Valoare</td>
                </tr>
            }
        </tbody>
    </table>


    <h3>Combustibil</h3>

    <input type="text" @bind="@moneySpentCombustibil" />

    <button class="btn btn-primary" @onclick="AddExpenseCombustibil">Adaugă</button>
    <table class="table">
        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses.Where(e => e.Descriere == "Combustibil"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(moneySpentCombustibil) && expenses.Any(e => e.Descriere == "Combustibil"))
            {
                var expense = expenses.First(e => e.Descriere == "Combustibil");
                <tr>
                    <td colspan="4">@expense.Valoare</td>
                </tr>
            }
        </tbody>
    </table>

    <h3>Transport Public</h3>
    <input type="text" @bind="@moneySpentTransportPublic" />

    <button class="btn btn-primary" @onclick="AddExpenseTransportPublic">Adaugă</button>
    <table class="table">
        <thead>
            <tr>
                <th>Zi</th>
                <th>Săptămână</th>
                <th>Lună</th>
                <th>An</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses.Where(e => e.Descriere == "Transport Public"))
            {
                <tr>
                    <td>@expense.Zi</td>
                    <td>@expense.Saptamana</td>
                    <td>@expense.Luna</td>
                    <td>@expense.An</td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(moneySpentTransportPublic) && expenses.Any(e => e.Descriere == "Transport Public"))
            {
                var expense = expenses.First(e => e.Descriere == "Transport Public");
                <tr>
                    <td colspan="4">@expense.Valoare</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Expense[]? expenses;
    private string moneySpent;
    private string moneySpentSupermarket;
    private string moneySpentCombustibil;
    private string moneySpentTransportPublic;


    protected override async Task OnInitializedAsync()
    {
        expenses = await Http.GetFromJsonAsync<Expense[]>("ReportExpenses");
    }

    private async Task AddExpense()
    {
        var expense_cafea = new Expense
            {
                Zi = decimal.Parse(moneySpent),
                Saptamana = 7 * decimal.Parse(moneySpent),
                Luna = 30 * decimal.Parse(moneySpent),
                An = 364 * decimal.Parse(moneySpent),
                Descriere = "Cafea",
                Valoare = decimal.Parse(moneySpent)
            };

        HttpResponseMessage response = await Http.PostAsJsonAsync("ReportExpenses", expense_cafea);

        if (response.IsSuccessStatusCode)
        {
            expenses = await response.Content.ReadFromJsonAsync<Expense[]>();
            moneySpent = "";

            StateHasChanged();


        }
        else
        {
            Console.WriteLine("Solicitarea a eșuat. Mesaj de eroare: " + response.StatusCode.ToString());
            StateHasChanged();
        }
    }

    private async Task AddExpenseSupermarket()
    {
        var expense_supermarket = new Expense
            {
                Zi = decimal.Parse(moneySpentSupermarket),
                Saptamana = 7 * decimal.Parse(moneySpentSupermarket),
                Luna = 30 * decimal.Parse(moneySpentSupermarket),
                An = 364 * decimal.Parse(moneySpentSupermarket),
                Descriere = "Supermarket",
                Valoare = decimal.Parse(moneySpentSupermarket)
            };



        HttpResponseMessage response2 = await Http.PostAsJsonAsync("ReportExpenses", expense_supermarket);

        if (response2.IsSuccessStatusCode)
        {
            expenses = await response2.Content.ReadFromJsonAsync<Expense[]>();
            moneySpentSupermarket = "";

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Solicitarea a eșuat. Mesaj de eroare: " + response2.StatusCode.ToString());
            StateHasChanged();
        }
    }
    private async Task AddExpenseCombustibil()
    {
        var expense_combustibil = new Expense
            {
                Zi = decimal.Parse(moneySpentCombustibil),
                Saptamana = 7 * decimal.Parse(moneySpentCombustibil),
                Luna = 30 * decimal.Parse(moneySpentCombustibil),
                An = 364 * decimal.Parse(moneySpentCombustibil),
                Descriere = "Combustibil",
                Valoare = decimal.Parse(moneySpentCombustibil)
            };

        HttpResponseMessage response3 = await Http.PostAsJsonAsync("ReportExpenses", expense_combustibil);

        if (response3.IsSuccessStatusCode)
        {
            expenses = await response3.Content.ReadFromJsonAsync<Expense[]>();
            moneySpentCombustibil = "";

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Solicitarea a eșuat. Mesaj de eroare: " + response3.StatusCode.ToString());
            StateHasChanged();
        }
    }

    private async Task AddExpenseTransportPublic()
    {
        var expense_transportPublic = new Expense
            {
                Zi = decimal.Parse(moneySpentTransportPublic),
                Saptamana = 7 * decimal.Parse(moneySpentTransportPublic),
                Luna = 30 * decimal.Parse(moneySpentTransportPublic),
                An = 364 * decimal.Parse(moneySpentTransportPublic),
                Descriere = "Transport Public",
                Valoare = decimal.Parse(moneySpentTransportPublic)
            };

        HttpResponseMessage response4 = await Http.PostAsJsonAsync("ReportExpenses", expense_transportPublic);

        if (response4.IsSuccessStatusCode)
        {
            expenses = await response4.Content.ReadFromJsonAsync<Expense[]>();
            moneySpentTransportPublic = "";


            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Solicitarea a eșuat. Mesaj de eroare: " + response4.StatusCode.ToString());
            StateHasChanged();
        }
    }


}